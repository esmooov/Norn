// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "$": $dollar
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    
    function newSTRef(val) {
      return function() {
        return { value: val };
      };
    }
    ;
    
    function readSTRef(ref) {
      return function() {
        return ref.value;
      };
    }
    ;
    
    function modifySTRef(ref) {
      return function(f) {
        return function() {
          return ref.value = f(ref.value);
        };
      };
    }
    ;
    
    function writeSTRef(ref) {
      return function(a) {
        return function() {
          return ref.value = a;
        };
      };
    }
    ;
    return {
        writeSTRef: writeSTRef, 
        modifySTRef: modifySTRef, 
        readSTRef: readSTRef, 
        newSTRef: newSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    return {
        Tuple: Tuple
    };
})();
var PS = PS || {};
PS.Signal_Wire = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Either = PS.Data_Either;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Function = PS.Data_Function;
    
    function throw(e){
        console.log("Error: ",e);  
    }
;
    var Pool = (function () {
        function Pool(value0) {
            this.value0 = value0;
        };
        Pool.create = function (value0) {
            return new Pool(value0);
        };
        return Pool;
    })();
    var SG = (function () {
        function SG(value0) {
            this.value0 = value0;
        };
        SG.create = function (value0) {
            return new SG(value0);
        };
        return SG;
    })();
    var S = (function () {
        function S(value0) {
            this.value0 = value0;
        };
        S.create = function (value0) {
            return new S(value0);
        };
        return S;
    })();
    var Ready = (function () {
        function Ready(value0) {
            this.value0 = value0;
        };
        Ready.create = function (value0) {
            return new Ready(value0);
        };
        return Ready;
    })();
    var Updated = (function () {
        function Updated(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Updated.create = function (value0) {
            return function (value1) {
                return new Updated(value0, value1);
            };
        };
        return Updated;
    })();
    
    /**
     * delay :: forall a. a -> Signal a -> SignalGen (Signal a)
     * delay x0 (S s) = SG $ \pool -> do
     * ref <- newSTRef (Ready x0)
     * let update x = s >>= \x' -> writeSTRef ref (Updated x' x)
     * addSignal return update ref pool
     * start :: forall a r. SignalGen (Signal a) -> Eff (a :: (a :: Action | r) a)
     * start (SG gen) = do
     * foreign import data CurFun :: * -> !
     * foreign import add """
     * function add(a){
     * return function(b){console.log(a + b);}  
     * };
     * """ :: forall r. Number -> (Eff (curfun :: CurFun Number | r) SignalGen) 
     */
    var main = Debug_Trace.trace("Foob");
    var addSignal = function (sample) {
        return function (update) {
            return function (ref) {
                return function (pool) {
                    
                    /**
                     * _         -> throw "Signal Not Updated"
                     */
                    var upd = function __do() {
                        var v = Control_Monad_ST.readSTRef(ref)();
                        if (v instanceof Ready) {
                            return update(v.value0)();
                        };
                        if (v instanceof Updated) {
                            return v.value0;
                        };
                        throw new Error("Failed pattern match");
                    };
                    var sig = S.create(function __do() {
                        var v = Control_Monad_ST.readSTRef(ref)();
                        if (v instanceof Ready) {
                            return sample(v.value0)();
                        };
                        if (v instanceof Updated) {
                            return v.value1;
                        };
                        throw new Error("Failed pattern match");
                    });
                    var fin = function __do() {
                        var v = Control_Monad_ST.readSTRef(ref)();
                        if (v instanceof Updated) {
                            return Control_Monad_ST.writeSTRef(ref)(new Ready(v.value0))();
                        };
                        if (v instanceof Ready) {
                            return Control_Monad_ST.writeSTRef(ref)(new Ready(v.value0))();
                        };
                        throw new Error("Failed pattern match");
                    };
                    return function __do() {
                        var _7 = Control_Monad_ST.newSTRef(new Data_Tuple.Tuple(upd, fin))();
                        Control_Monad_ST.modifySTRef(pool)(function (p) {
                            return p;
                        })();
                        return sig;
                    };
                };
            };
        };
    };
    return {
        Ready: Ready, 
        Updated: Updated, 
        S: S, 
        SG: SG, 
        Pool: Pool, 
        main: main, 
        addSignal: addSignal, 
        "throw": $$throw
    };
})();
