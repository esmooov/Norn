// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;
    
    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    
    /**
     *  | Addition and multiplication
     */
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    
    /**
     *  | Addition and multiplication
     */
    var $plus = function (dict) {
        return dict["+"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var showString = new Show(showStringImpl);
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    
    /**
     *  | An alias for `true`, which can be useful in guard clauses:
     *  |
     *  | E.g.
     *  |
     *  |     max x y | x >= y = x
     *  |             | otherwise = y
     */
    var otherwise = true;
    var not = function (dict) {
        return dict.not;
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    
    /**
     *  | Flips the order of the arguments to a function of two arguments.
     */
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    
    /**
     *  | Returns its first argument and ignores its second.
     */
    var $$const = function (_76) {
        return function (_77) {
            return _76;
        };
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _756 = compare(__dict_Ord_12)(a1)(a2);
                if (_756 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _757 = compare(__dict_Ord_13)(a1)(a2);
                if (_757 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Ord: Ord, 
        Eq: Eq, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "||": $bar$bar, 
        "&&": $amp$amp, 
        "<=": $less$eq, 
        "<": $less, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "==": $eq$eq, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "$": $dollar, 
        id: id, 
        "<<<": $less$less$less, 
        "const": $$const, 
        flip: flip, 
        otherwise: otherwise, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showString: showString, 
        showArray: showArray, 
        semiringNumber: semiringNumber, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        ordString: ordString, 
        boolLikeBoolean: boolLikeBoolean
    };
})();
var PS = PS || {};
PS.$$Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
    return {
        min: min
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    
    function runPure(f) {
      return f();
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        runPure: runPure, 
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    
    function newSTRef(val) {
      return function() {
        return { value: val };
      };
    }
    ;
    
    function readSTRef(ref) {
      return function() {
        return ref.value;
      };
    }
    ;
    
    function modifySTRef(ref) {
      return function(f) {
        return function() {
          return ref.value = f(ref.value);
        };
      };
    }
    ;
    
    function writeSTRef(ref) {
      return function(a) {
        return function() {
          return ref.value = a;
        };
      };
    }
    ;
    
    function runST(f) {
      return f;
    }
    ;
    return {
        runST: runST, 
        writeSTRef: writeSTRef, 
        modifySTRef: modifySTRef, 
        readSTRef: readSTRef, 
        newSTRef: newSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    var print = function (__dict_Show_19) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_19)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_28) {
        return function (_113) {
            return function (_114) {
                if (_113) {
                    return _114;
                };
                if (!_113) {
                    return Prelude["return"](__dict_Monad_28)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return {
        when: when
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $times$greater = function (__dict_Apply_51) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_51)(Prelude["<$>"](__dict_Apply_51["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    return {
        "*>": $times$greater
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    var maybe = function (_146) {
        return function (_147) {
            return function (_148) {
                if (_148 instanceof Nothing) {
                    return _146;
                };
                if (_148 instanceof Just) {
                    return _147(_148.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var eqMaybe = function (__dict_Eq_85) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_85))(a)(b);
            };
        }, function (_162) {
            return function (_163) {
                if (_162 instanceof Nothing && _163 instanceof Nothing) {
                    return true;
                };
                if (_162 instanceof Just && _163 instanceof Just) {
                    return Prelude["=="](__dict_Eq_85)(_162.value0)(_163.value0);
                };
                return false;
            };
        });
    };
    return {
        Nothing: Nothing, 
        Just: Just, 
        isNothing: isNothing, 
        isJust: isJust, 
        maybe: maybe, 
        eqMaybe: eqMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function reverse (l) {  return l.slice().reverse();};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    var semigroupArray = new Prelude.Semigroup(append);
    var functorArray = new Prelude.Functor(map);
    return {
        concatMap: concatMap, 
        reverse: reverse, 
        append: append, 
        map: map, 
        functorArray: functorArray, 
        semigroupArray: semigroupArray
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidArray: monoidArray
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    return {
        Tuple: Tuple
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_264) {
        return function (__dict_Foldable_265) {
            return function (f) {
                return foldr(__dict_Foldable_265)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_264["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_264)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_266) {
        return function (__dict_Foldable_267) {
            return Prelude.flip(traverse_(__dict_Applicative_266)(__dict_Foldable_267));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var or = function (__dict_Foldable_274) {
        return foldl(__dict_Foldable_274)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var foldableMaybe = new Foldable(function (__dict_Monoid_279) {
        return function (_397) {
            return function (_398) {
                if (_398 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_279);
                };
                if (_398 instanceof Data_Maybe.Just) {
                    return _397(_398.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_394) {
        return function (_395) {
            return function (_396) {
                if (_396 instanceof Data_Maybe.Nothing) {
                    return _395;
                };
                if (_396 instanceof Data_Maybe.Just) {
                    return _394(_395)(_396.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_391) {
        return function (_392) {
            return function (_393) {
                if (_393 instanceof Data_Maybe.Nothing) {
                    return _392;
                };
                if (_393 instanceof Data_Maybe.Just) {
                    return _391(_393.value0)(_392);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableArray = new Foldable(function (__dict_Monoid_282) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_282["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_282))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var any = function (__dict_Foldable_291) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_291)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_292) {
        return function (__dict_Foldable_293) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_293))(Prelude["=="](__dict_Eq_292));
        };
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        elem: elem, 
        any: any, 
        or: or, 
        for_: for_, 
        traverse_: traverse_, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray, 
        foldableMaybe: foldableMaybe
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_311) {
        return function (_454) {
            if (_454.length === 0) {
                return Prelude.pure(__dict_Applicative_311)([  ]);
            };
            if (_454.length >= 1) {
                var _783 = _454.slice(1);
                return Prelude["<*>"](__dict_Applicative_311["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_311["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_454[0]))(sequence(traversableArray)(__dict_Applicative_311)(_783));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_310) {
        return function (_452) {
            return function (_453) {
                if (_453.length === 0) {
                    return Prelude.pure(__dict_Applicative_310)([  ]);
                };
                if (_453.length >= 1) {
                    var _787 = _453.slice(1);
                    return Prelude["<*>"](__dict_Applicative_310["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_310["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_452(_453[0])))(traverse(traversableArray)(__dict_Applicative_310)(_452)(_787));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var $$for = function (__dict_Applicative_321) {
        return function (__dict_Traversable_322) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_322)(__dict_Applicative_321)(f)(x);
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        "for": $$for, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray
    };
})();
var PS = PS || {};
PS.Data_Map = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Leaf = (function () {
        function Leaf() {

        };
        Leaf.value = new Leaf();
        return Leaf;
    })();
    var Two = (function () {
        function Two(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        Two.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new Two(value0, value1, value2, value3);
                    };
                };
            };
        };
        return Two;
    })();
    var Three = (function () {
        function Three(value0, value1, value2, value3, value4, value5, value6) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
            this.value6 = value6;
        };
        Three.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return function (value6) {
                                    return new Three(value0, value1, value2, value3, value4, value5, value6);
                                };
                            };
                        };
                    };
                };
            };
        };
        return Three;
    })();
    var TwoLeft = (function () {
        function TwoLeft(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        TwoLeft.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new TwoLeft(value0, value1, value2);
                };
            };
        };
        return TwoLeft;
    })();
    var TwoRight = (function () {
        function TwoRight(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        TwoRight.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new TwoRight(value0, value1, value2);
                };
            };
        };
        return TwoRight;
    })();
    var ThreeLeft = (function () {
        function ThreeLeft(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeLeft.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeLeft;
    })();
    var ThreeMiddle = (function () {
        function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeMiddle.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeMiddle;
    })();
    var ThreeRight = (function () {
        function ThreeRight(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeRight.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeRight(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeRight;
    })();
    var KickUp = (function () {
        function KickUp(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        KickUp.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new KickUp(value0, value1, value2, value3);
                    };
                };
            };
        };
        return KickUp;
    })();
    var lookup = function (__copy___dict_Ord_428) {
        return function (__copy__533) {
            return function (__copy__534) {
                var __dict_Ord_428 = __copy___dict_Ord_428;
                var _533 = __copy__533;
                var _534 = __copy__534;
                tco: while (true) {
                    if (_534 instanceof Leaf) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (_534 instanceof Two && Prelude["=="](__dict_Ord_428["__superclass_Prelude.Eq_0"]())(_533)(_534.value1)) {
                        return new Data_Maybe.Just(_534.value2);
                    };
                    if (_534 instanceof Two && Prelude["<"](__dict_Ord_428)(_533)(_534.value1)) {
                        var __tco___dict_Ord_428 = __dict_Ord_428;
                        var __tco__533 = _533;
                        var __tco__534 = _534.value0;
                        __dict_Ord_428 = __tco___dict_Ord_428;
                        _533 = __tco__533;
                        _534 = __tco__534;
                        continue tco;
                    };
                    if (_534 instanceof Two) {
                        var __tco___dict_Ord_428 = __dict_Ord_428;
                        var __tco__533 = _533;
                        var __tco__534 = _534.value3;
                        __dict_Ord_428 = __tco___dict_Ord_428;
                        _533 = __tco__533;
                        _534 = __tco__534;
                        continue tco;
                    };
                    if (_534 instanceof Three && Prelude["=="](__dict_Ord_428["__superclass_Prelude.Eq_0"]())(_533)(_534.value1)) {
                        return new Data_Maybe.Just(_534.value2);
                    };
                    if (_534 instanceof Three && Prelude["=="](__dict_Ord_428["__superclass_Prelude.Eq_0"]())(_533)(_534.value4)) {
                        return new Data_Maybe.Just(_534.value5);
                    };
                    if (_534 instanceof Three && Prelude["<"](__dict_Ord_428)(_533)(_534.value1)) {
                        var __tco___dict_Ord_428 = __dict_Ord_428;
                        var __tco__533 = _533;
                        var __tco__534 = _534.value0;
                        __dict_Ord_428 = __tco___dict_Ord_428;
                        _533 = __tco__533;
                        _534 = __tco__534;
                        continue tco;
                    };
                    if (_534 instanceof Three && (Prelude["<"](__dict_Ord_428)(_534.value1)(_533) && Prelude["<="](__dict_Ord_428)(_533)(_534.value4))) {
                        var __tco___dict_Ord_428 = __dict_Ord_428;
                        var __tco__533 = _533;
                        var __tco__534 = _534.value3;
                        __dict_Ord_428 = __tco___dict_Ord_428;
                        _533 = __tco__533;
                        _534 = __tco__534;
                        continue tco;
                    };
                    if (_534 instanceof Three) {
                        var __tco___dict_Ord_428 = __dict_Ord_428;
                        var __tco__533 = _533;
                        var __tco__534 = _534.value6;
                        __dict_Ord_428 = __tco___dict_Ord_428;
                        _533 = __tco__533;
                        _534 = __tco__534;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var member = function (__dict_Ord_429) {
        return function (k) {
            return function (m) {
                return Data_Maybe.isJust(lookup(__dict_Ord_429)(k)(m));
            };
        };
    };
    var fromZipper = function (__copy___dict_Ord_430) {
        return function (__copy__535) {
            return function (__copy__536) {
                var __dict_Ord_430 = __copy___dict_Ord_430;
                var _535 = __copy__535;
                var _536 = __copy__536;
                tco: while (true) {
                    if (_535.length === 0) {
                        return _536;
                    };
                    if (_535.length >= 1) {
                        var _843 = _535.slice(1);
                        if (_535[0] instanceof TwoLeft) {
                            var __tco___dict_Ord_430 = __dict_Ord_430;
                            var __tco__536 = new Two(_536, (_535[0]).value0, (_535[0]).value1, (_535[0]).value2);
                            __dict_Ord_430 = __tco___dict_Ord_430;
                            _535 = _843;
                            _536 = __tco__536;
                            continue tco;
                        };
                    };
                    if (_535.length >= 1) {
                        var _848 = _535.slice(1);
                        if (_535[0] instanceof TwoRight) {
                            var __tco___dict_Ord_430 = __dict_Ord_430;
                            var __tco__536 = new Two((_535[0]).value0, (_535[0]).value1, (_535[0]).value2, _536);
                            __dict_Ord_430 = __tco___dict_Ord_430;
                            _535 = _848;
                            _536 = __tco__536;
                            continue tco;
                        };
                    };
                    if (_535.length >= 1) {
                        var _856 = _535.slice(1);
                        if (_535[0] instanceof ThreeLeft) {
                            var __tco___dict_Ord_430 = __dict_Ord_430;
                            var __tco__536 = new Three(_536, (_535[0]).value0, (_535[0]).value1, (_535[0]).value2, (_535[0]).value3, (_535[0]).value4, (_535[0]).value5);
                            __dict_Ord_430 = __tco___dict_Ord_430;
                            _535 = _856;
                            _536 = __tco__536;
                            continue tco;
                        };
                    };
                    if (_535.length >= 1) {
                        var _864 = _535.slice(1);
                        if (_535[0] instanceof ThreeMiddle) {
                            var __tco___dict_Ord_430 = __dict_Ord_430;
                            var __tco__536 = new Three((_535[0]).value0, (_535[0]).value1, (_535[0]).value2, _536, (_535[0]).value3, (_535[0]).value4, (_535[0]).value5);
                            __dict_Ord_430 = __tco___dict_Ord_430;
                            _535 = _864;
                            _536 = __tco__536;
                            continue tco;
                        };
                    };
                    if (_535.length >= 1) {
                        var _872 = _535.slice(1);
                        if (_535[0] instanceof ThreeRight) {
                            var __tco___dict_Ord_430 = __dict_Ord_430;
                            var __tco__536 = new Three((_535[0]).value0, (_535[0]).value1, (_535[0]).value2, (_535[0]).value3, (_535[0]).value4, (_535[0]).value5, _536);
                            __dict_Ord_430 = __tco___dict_Ord_430;
                            _535 = _872;
                            _536 = __tco__536;
                            continue tco;
                        };
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var insert = function (__dict_Ord_431) {
        var up = function (__copy___dict_Ord_432) {
            return function (__copy__547) {
                return function (__copy__548) {
                    var __dict_Ord_432 = __copy___dict_Ord_432;
                    var _547 = __copy__547;
                    var _548 = __copy__548;
                    tco: while (true) {
                        if (_547.length === 0) {
                            return new Two(_548.value0, _548.value1, _548.value2, _548.value3);
                        };
                        if (_547.length >= 1) {
                            var _887 = _547.slice(1);
                            if (_547[0] instanceof TwoLeft) {
                                return fromZipper(__dict_Ord_432)(_887)(new Three(_548.value0, _548.value1, _548.value2, _548.value3, (_547[0]).value0, (_547[0]).value1, (_547[0]).value2));
                            };
                        };
                        if (_547.length >= 1) {
                            var _896 = _547.slice(1);
                            if (_547[0] instanceof TwoRight) {
                                return fromZipper(__dict_Ord_432)(_896)(new Three((_547[0]).value0, (_547[0]).value1, (_547[0]).value2, _548.value0, _548.value1, _548.value2, _548.value3));
                            };
                        };
                        if (_547.length >= 1) {
                            var _908 = _547.slice(1);
                            if (_547[0] instanceof ThreeLeft) {
                                var __tco___dict_Ord_432 = __dict_Ord_432;
                                var __tco__548 = new KickUp(new Two(_548.value0, _548.value1, _548.value2, _548.value3), (_547[0]).value0, (_547[0]).value1, new Two((_547[0]).value2, (_547[0]).value3, (_547[0]).value4, (_547[0]).value5));
                                __dict_Ord_432 = __tco___dict_Ord_432;
                                _547 = _908;
                                _548 = __tco__548;
                                continue tco;
                            };
                        };
                        if (_547.length >= 1) {
                            var _920 = _547.slice(1);
                            if (_547[0] instanceof ThreeMiddle) {
                                var __tco___dict_Ord_432 = __dict_Ord_432;
                                var __tco__548 = new KickUp(new Two((_547[0]).value0, (_547[0]).value1, (_547[0]).value2, _548.value0), _548.value1, _548.value2, new Two(_548.value3, (_547[0]).value3, (_547[0]).value4, (_547[0]).value5));
                                __dict_Ord_432 = __tco___dict_Ord_432;
                                _547 = _920;
                                _548 = __tco__548;
                                continue tco;
                            };
                        };
                        if (_547.length >= 1) {
                            var _932 = _547.slice(1);
                            if (_547[0] instanceof ThreeRight) {
                                var __tco___dict_Ord_432 = __dict_Ord_432;
                                var __tco__548 = new KickUp(new Two((_547[0]).value0, (_547[0]).value1, (_547[0]).value2, (_547[0]).value3), (_547[0]).value4, (_547[0]).value5, new Two(_548.value0, _548.value1, _548.value2, _548.value3));
                                __dict_Ord_432 = __tco___dict_Ord_432;
                                _547 = _932;
                                _548 = __tco__548;
                                continue tco;
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var down = function (__copy___dict_Ord_433) {
            return function (__copy__543) {
                return function (__copy__544) {
                    return function (__copy__545) {
                        return function (__copy__546) {
                            var __dict_Ord_433 = __copy___dict_Ord_433;
                            var _543 = __copy__543;
                            var _544 = __copy__544;
                            var _545 = __copy__545;
                            var _546 = __copy__546;
                            tco: while (true) {
                                if (_546 instanceof Leaf) {
                                    return up(__dict_Ord_433)(_543)(new KickUp(Leaf.value, _544, _545, Leaf.value));
                                };
                                if (_546 instanceof Two && Prelude["=="](__dict_Ord_433["__superclass_Prelude.Eq_0"]())(_544)(_546.value1)) {
                                    return fromZipper(__dict_Ord_433)(_543)(new Two(_546.value0, _544, _545, _546.value3));
                                };
                                if (_546 instanceof Two && Prelude["<"](__dict_Ord_433)(_544)(_546.value1)) {
                                    var __tco___dict_Ord_433 = __dict_Ord_433;
                                    var __tco__543 = Prelude[":"](new TwoLeft(_546.value1, _546.value2, _546.value3))(_543);
                                    var __tco__544 = _544;
                                    var __tco__545 = _545;
                                    var __tco__546 = _546.value0;
                                    __dict_Ord_433 = __tco___dict_Ord_433;
                                    _543 = __tco__543;
                                    _544 = __tco__544;
                                    _545 = __tco__545;
                                    _546 = __tco__546;
                                    continue tco;
                                };
                                if (_546 instanceof Two) {
                                    var __tco___dict_Ord_433 = __dict_Ord_433;
                                    var __tco__543 = Prelude[":"](new TwoRight(_546.value0, _546.value1, _546.value2))(_543);
                                    var __tco__544 = _544;
                                    var __tco__545 = _545;
                                    var __tco__546 = _546.value3;
                                    __dict_Ord_433 = __tco___dict_Ord_433;
                                    _543 = __tco__543;
                                    _544 = __tco__544;
                                    _545 = __tco__545;
                                    _546 = __tco__546;
                                    continue tco;
                                };
                                if (_546 instanceof Three && Prelude["=="](__dict_Ord_433["__superclass_Prelude.Eq_0"]())(_544)(_546.value1)) {
                                    return fromZipper(__dict_Ord_433)(_543)(new Three(_546.value0, _544, _545, _546.value3, _546.value4, _546.value5, _546.value6));
                                };
                                if (_546 instanceof Three && Prelude["=="](__dict_Ord_433["__superclass_Prelude.Eq_0"]())(_544)(_546.value4)) {
                                    return fromZipper(__dict_Ord_433)(_543)(new Three(_546.value0, _546.value1, _546.value2, _546.value3, _544, _545, _546.value6));
                                };
                                if (_546 instanceof Three && Prelude["<"](__dict_Ord_433)(_544)(_546.value1)) {
                                    var __tco___dict_Ord_433 = __dict_Ord_433;
                                    var __tco__543 = Prelude[":"](new ThreeLeft(_546.value1, _546.value2, _546.value3, _546.value4, _546.value5, _546.value6))(_543);
                                    var __tco__544 = _544;
                                    var __tco__545 = _545;
                                    var __tco__546 = _546.value0;
                                    __dict_Ord_433 = __tco___dict_Ord_433;
                                    _543 = __tco__543;
                                    _544 = __tco__544;
                                    _545 = __tco__545;
                                    _546 = __tco__546;
                                    continue tco;
                                };
                                if (_546 instanceof Three && (Prelude["<"](__dict_Ord_433)(_546.value1)(_544) && Prelude["<="](__dict_Ord_433)(_544)(_546.value4))) {
                                    var __tco___dict_Ord_433 = __dict_Ord_433;
                                    var __tco__543 = Prelude[":"](new ThreeMiddle(_546.value0, _546.value1, _546.value2, _546.value4, _546.value5, _546.value6))(_543);
                                    var __tco__544 = _544;
                                    var __tco__545 = _545;
                                    var __tco__546 = _546.value3;
                                    __dict_Ord_433 = __tco___dict_Ord_433;
                                    _543 = __tco__543;
                                    _544 = __tco__544;
                                    _545 = __tco__545;
                                    _546 = __tco__546;
                                    continue tco;
                                };
                                if (_546 instanceof Three) {
                                    var __tco___dict_Ord_433 = __dict_Ord_433;
                                    var __tco__543 = Prelude[":"](new ThreeRight(_546.value0, _546.value1, _546.value2, _546.value3, _546.value4, _546.value5))(_543);
                                    var __tco__544 = _544;
                                    var __tco__545 = _545;
                                    var __tco__546 = _546.value6;
                                    __dict_Ord_433 = __tco___dict_Ord_433;
                                    _543 = __tco__543;
                                    _544 = __tco__544;
                                    _545 = __tco__545;
                                    _546 = __tco__546;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match");
                            };
                        };
                    };
                };
            };
        };
        return down(__dict_Ord_431)([  ]);
    };
    var empty = Leaf.value;
    var $$delete = function (__dict_Ord_439) {
        var up = function (__copy___dict_Ord_440) {
            return function (__copy__552) {
                return function (__copy__553) {
                    var __dict_Ord_440 = __copy___dict_Ord_440;
                    var _552 = __copy__552;
                    var _553 = __copy__553;
                    tco: while (true) {
                        if (_552.length === 0) {
                            return _553;
                        };
                        if (_552.length >= 1) {
                            var _990 = _552.slice(1);
                            if (_552[0] instanceof TwoLeft && ((_552[0]).value2 instanceof Leaf && _553 instanceof Leaf)) {
                                return fromZipper(__dict_Ord_440)(_990)(new Two(Leaf.value, (_552[0]).value0, (_552[0]).value1, Leaf.value));
                            };
                        };
                        if (_552.length >= 1) {
                            var _995 = _552.slice(1);
                            if (_552[0] instanceof TwoRight && ((_552[0]).value0 instanceof Leaf && _553 instanceof Leaf)) {
                                return fromZipper(__dict_Ord_440)(_995)(new Two(Leaf.value, (_552[0]).value1, (_552[0]).value2, Leaf.value));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1004 = _552.slice(1);
                            if (_552[0] instanceof TwoLeft && (_552[0]).value2 instanceof Two) {
                                var __tco___dict_Ord_440 = __dict_Ord_440;
                                var __tco__553 = new Three(_553, (_552[0]).value0, (_552[0]).value1, (_552[0]).value2.value0, (_552[0]).value2.value1, (_552[0]).value2.value2, (_552[0]).value2.value3);
                                __dict_Ord_440 = __tco___dict_Ord_440;
                                _552 = _1004;
                                _553 = __tco__553;
                                continue tco;
                            };
                        };
                        if (_552.length >= 1) {
                            var _1013 = _552.slice(1);
                            if (_552[0] instanceof TwoRight && (_552[0]).value0 instanceof Two) {
                                var __tco___dict_Ord_440 = __dict_Ord_440;
                                var __tco__553 = new Three((_552[0]).value0.value0, (_552[0]).value0.value1, (_552[0]).value0.value2, (_552[0]).value0.value3, (_552[0]).value1, (_552[0]).value2, _553);
                                __dict_Ord_440 = __tco___dict_Ord_440;
                                _552 = _1013;
                                _553 = __tco__553;
                                continue tco;
                            };
                        };
                        if (_552.length >= 1) {
                            var _1025 = _552.slice(1);
                            if (_552[0] instanceof TwoLeft && (_552[0]).value2 instanceof Three) {
                                return fromZipper(__dict_Ord_440)(_1025)(new Two(new Two(_553, (_552[0]).value0, (_552[0]).value1, (_552[0]).value2.value0), (_552[0]).value2.value1, (_552[0]).value2.value2, new Two((_552[0]).value2.value3, (_552[0]).value2.value4, (_552[0]).value2.value5, (_552[0]).value2.value6)));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1037 = _552.slice(1);
                            if (_552[0] instanceof TwoRight && (_552[0]).value0 instanceof Three) {
                                return fromZipper(__dict_Ord_440)(_1037)(new Two(new Two((_552[0]).value0.value0, (_552[0]).value0.value1, (_552[0]).value0.value2, (_552[0]).value0.value3), (_552[0]).value0.value4, (_552[0]).value0.value5, new Two((_552[0]).value0.value6, (_552[0]).value1, (_552[0]).value2, _553)));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1045 = _552.slice(1);
                            if (_552[0] instanceof ThreeLeft && ((_552[0]).value2 instanceof Leaf && ((_552[0]).value5 instanceof Leaf && _553 instanceof Leaf))) {
                                return fromZipper(__dict_Ord_440)(_1045)(new Three(Leaf.value, (_552[0]).value0, (_552[0]).value1, Leaf.value, (_552[0]).value3, (_552[0]).value4, Leaf.value));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1053 = _552.slice(1);
                            if (_552[0] instanceof ThreeMiddle && ((_552[0]).value0 instanceof Leaf && ((_552[0]).value5 instanceof Leaf && _553 instanceof Leaf))) {
                                return fromZipper(__dict_Ord_440)(_1053)(new Three(Leaf.value, (_552[0]).value1, (_552[0]).value2, Leaf.value, (_552[0]).value3, (_552[0]).value4, Leaf.value));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1061 = _552.slice(1);
                            if (_552[0] instanceof ThreeRight && ((_552[0]).value0 instanceof Leaf && ((_552[0]).value3 instanceof Leaf && _553 instanceof Leaf))) {
                                return fromZipper(__dict_Ord_440)(_1061)(new Three(Leaf.value, (_552[0]).value1, (_552[0]).value2, Leaf.value, (_552[0]).value4, (_552[0]).value5, Leaf.value));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1073 = _552.slice(1);
                            if (_552[0] instanceof ThreeLeft && (_552[0]).value2 instanceof Two) {
                                return fromZipper(__dict_Ord_440)(_1073)(new Two(new Three(_553, (_552[0]).value0, (_552[0]).value1, (_552[0]).value2.value0, (_552[0]).value2.value1, (_552[0]).value2.value2, (_552[0]).value2.value3), (_552[0]).value3, (_552[0]).value4, (_552[0]).value5));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1085 = _552.slice(1);
                            if (_552[0] instanceof ThreeMiddle && (_552[0]).value0 instanceof Two) {
                                return fromZipper(__dict_Ord_440)(_1085)(new Two(new Three((_552[0]).value0.value0, (_552[0]).value0.value1, (_552[0]).value0.value2, (_552[0]).value0.value3, (_552[0]).value1, (_552[0]).value2, _553), (_552[0]).value3, (_552[0]).value4, (_552[0]).value5));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1097 = _552.slice(1);
                            if (_552[0] instanceof ThreeMiddle && (_552[0]).value5 instanceof Two) {
                                return fromZipper(__dict_Ord_440)(_1097)(new Two((_552[0]).value0, (_552[0]).value1, (_552[0]).value2, new Three(_553, (_552[0]).value3, (_552[0]).value4, (_552[0]).value5.value0, (_552[0]).value5.value1, (_552[0]).value5.value2, (_552[0]).value5.value3)));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1109 = _552.slice(1);
                            if (_552[0] instanceof ThreeRight && (_552[0]).value3 instanceof Two) {
                                return fromZipper(__dict_Ord_440)(_1109)(new Two((_552[0]).value0, (_552[0]).value1, (_552[0]).value2, new Three((_552[0]).value3.value0, (_552[0]).value3.value1, (_552[0]).value3.value2, (_552[0]).value3.value3, (_552[0]).value4, (_552[0]).value5, _553)));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1124 = _552.slice(1);
                            if (_552[0] instanceof ThreeLeft && (_552[0]).value2 instanceof Three) {
                                return fromZipper(__dict_Ord_440)(_1124)(new Three(new Two(_553, (_552[0]).value0, (_552[0]).value1, (_552[0]).value2.value0), (_552[0]).value2.value1, (_552[0]).value2.value2, new Two((_552[0]).value2.value3, (_552[0]).value2.value4, (_552[0]).value2.value5, (_552[0]).value2.value6), (_552[0]).value3, (_552[0]).value4, (_552[0]).value5));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1139 = _552.slice(1);
                            if (_552[0] instanceof ThreeMiddle && (_552[0]).value0 instanceof Three) {
                                return fromZipper(__dict_Ord_440)(_1139)(new Three(new Two((_552[0]).value0.value0, (_552[0]).value0.value1, (_552[0]).value0.value2, (_552[0]).value0.value3), (_552[0]).value0.value4, (_552[0]).value0.value5, new Two((_552[0]).value0.value6, (_552[0]).value1, (_552[0]).value2, _553), (_552[0]).value3, (_552[0]).value4, (_552[0]).value5));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1154 = _552.slice(1);
                            if (_552[0] instanceof ThreeMiddle && (_552[0]).value5 instanceof Three) {
                                return fromZipper(__dict_Ord_440)(_1154)(new Three((_552[0]).value0, (_552[0]).value1, (_552[0]).value2, new Two(_553, (_552[0]).value3, (_552[0]).value4, (_552[0]).value5.value0), (_552[0]).value5.value1, (_552[0]).value5.value2, new Two((_552[0]).value5.value3, (_552[0]).value5.value4, (_552[0]).value5.value5, (_552[0]).value5.value6)));
                            };
                        };
                        if (_552.length >= 1) {
                            var _1169 = _552.slice(1);
                            if (_552[0] instanceof ThreeRight && (_552[0]).value3 instanceof Three) {
                                return fromZipper(__dict_Ord_440)(_1169)(new Three((_552[0]).value0, (_552[0]).value1, (_552[0]).value2, new Two((_552[0]).value3.value0, (_552[0]).value3.value1, (_552[0]).value3.value2, (_552[0]).value3.value3), (_552[0]).value3.value4, (_552[0]).value3.value5, new Two((_552[0]).value3.value6, (_552[0]).value4, (_552[0]).value5, _553)));
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var removeMaxNode = function (__copy___dict_Ord_441) {
            return function (__copy__555) {
                return function (__copy__556) {
                    var __dict_Ord_441 = __copy___dict_Ord_441;
                    var _555 = __copy__555;
                    var _556 = __copy__556;
                    tco: while (true) {
                        if (_556 instanceof Two && (_556.value0 instanceof Leaf && _556.value3 instanceof Leaf)) {
                            return up(__dict_Ord_441)(_555)(Leaf.value);
                        };
                        if (_556 instanceof Two) {
                            var __tco___dict_Ord_441 = __dict_Ord_441;
                            var __tco__555 = Prelude[":"](new TwoRight(_556.value0, _556.value1, _556.value2))(_555);
                            var __tco__556 = _556.value3;
                            __dict_Ord_441 = __tco___dict_Ord_441;
                            _555 = __tco__555;
                            _556 = __tco__556;
                            continue tco;
                        };
                        if (_556 instanceof Three && (_556.value0 instanceof Leaf && (_556.value3 instanceof Leaf && _556.value6 instanceof Leaf))) {
                            return up(__dict_Ord_441)(Prelude[":"](new TwoRight(Leaf.value, _556.value1, _556.value2))(_555))(Leaf.value);
                        };
                        if (_556 instanceof Three) {
                            var __tco___dict_Ord_441 = __dict_Ord_441;
                            var __tco__555 = Prelude[":"](new ThreeRight(_556.value0, _556.value1, _556.value2, _556.value3, _556.value4, _556.value5))(_555);
                            var __tco__556 = _556.value6;
                            __dict_Ord_441 = __tco___dict_Ord_441;
                            _555 = __tco__555;
                            _556 = __tco__556;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var maxNode = function (__copy___dict_Ord_442) {
            return function (__copy__554) {
                var __dict_Ord_442 = __copy___dict_Ord_442;
                var _554 = __copy__554;
                tco: while (true) {
                    if (_554 instanceof Two && _554.value3 instanceof Leaf) {
                        return {
                            key: _554.value1, 
                            value: _554.value2
                        };
                    };
                    if (_554 instanceof Two) {
                        var __tco___dict_Ord_442 = __dict_Ord_442;
                        var __tco__554 = _554.value3;
                        __dict_Ord_442 = __tco___dict_Ord_442;
                        _554 = __tco__554;
                        continue tco;
                    };
                    if (_554 instanceof Three && _554.value6 instanceof Leaf) {
                        return {
                            key: _554.value4, 
                            value: _554.value5
                        };
                    };
                    if (_554 instanceof Three) {
                        var __tco___dict_Ord_442 = __dict_Ord_442;
                        var __tco__554 = _554.value6;
                        __dict_Ord_442 = __tco___dict_Ord_442;
                        _554 = __tco__554;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
        var down = function (__copy___dict_Ord_443) {
            return function (__copy__549) {
                return function (__copy__550) {
                    return function (__copy__551) {
                        var __dict_Ord_443 = __copy___dict_Ord_443;
                        var _549 = __copy__549;
                        var _550 = __copy__550;
                        var _551 = __copy__551;
                        tco: while (true) {
                            if (_551 instanceof Leaf) {
                                return fromZipper(__dict_Ord_443)(_549)(Leaf.value);
                            };
                            if (_551 instanceof Two && (_551.value0 instanceof Leaf && (_551.value3 instanceof Leaf && Prelude["=="](__dict_Ord_443["__superclass_Prelude.Eq_0"]())(_550)(_551.value1)))) {
                                return up(__dict_Ord_443)(_549)(Leaf.value);
                            };
                            if (_551 instanceof Two) {
                                if (Prelude["=="](__dict_Ord_443["__superclass_Prelude.Eq_0"]())(_550)(_551.value1)) {
                                    var max = maxNode(__dict_Ord_443)(_551.value0);
                                    return removeMaxNode(__dict_Ord_443)(Prelude[":"](new TwoLeft(max.key, max.value, _551.value3))(_549))(_551.value0);
                                };
                                if (Prelude["<"](__dict_Ord_443)(_550)(_551.value1)) {
                                    var __tco___dict_Ord_443 = __dict_Ord_443;
                                    var __tco__549 = Prelude[":"](new TwoLeft(_551.value1, _551.value2, _551.value3))(_549);
                                    var __tco__550 = _550;
                                    var __tco__551 = _551.value0;
                                    __dict_Ord_443 = __tco___dict_Ord_443;
                                    _549 = __tco__549;
                                    _550 = __tco__550;
                                    _551 = __tco__551;
                                    continue tco;
                                };
                                if (Prelude.otherwise) {
                                    var __tco___dict_Ord_443 = __dict_Ord_443;
                                    var __tco__549 = Prelude[":"](new TwoRight(_551.value0, _551.value1, _551.value2))(_549);
                                    var __tco__550 = _550;
                                    var __tco__551 = _551.value3;
                                    __dict_Ord_443 = __tco___dict_Ord_443;
                                    _549 = __tco__549;
                                    _550 = __tco__550;
                                    _551 = __tco__551;
                                    continue tco;
                                };
                            };
                            if (_551 instanceof Three && (_551.value0 instanceof Leaf && (_551.value3 instanceof Leaf && _551.value6 instanceof Leaf))) {
                                if (Prelude["=="](__dict_Ord_443["__superclass_Prelude.Eq_0"]())(_550)(_551.value1)) {
                                    return fromZipper(__dict_Ord_443)(_549)(new Two(Leaf.value, _551.value4, _551.value5, Leaf.value));
                                };
                                if (Prelude["=="](__dict_Ord_443["__superclass_Prelude.Eq_0"]())(_550)(_551.value4)) {
                                    return fromZipper(__dict_Ord_443)(_549)(new Two(Leaf.value, _551.value1, _551.value2, Leaf.value));
                                };
                            };
                            if (_551 instanceof Three) {
                                if (Prelude["=="](__dict_Ord_443["__superclass_Prelude.Eq_0"]())(_550)(_551.value1)) {
                                    var max = maxNode(__dict_Ord_443)(_551.value0);
                                    return removeMaxNode(__dict_Ord_443)(Prelude[":"](new ThreeLeft(max.key, max.value, _551.value3, _551.value4, _551.value5, _551.value6))(_549))(_551.value0);
                                };
                                if (Prelude["=="](__dict_Ord_443["__superclass_Prelude.Eq_0"]())(_550)(_551.value4)) {
                                    var max = maxNode(__dict_Ord_443)(_551.value3);
                                    return removeMaxNode(__dict_Ord_443)(Prelude[":"](new ThreeMiddle(_551.value0, _551.value1, _551.value2, max.key, max.value, _551.value6))(_549))(_551.value3);
                                };
                                if (Prelude["<"](__dict_Ord_443)(_550)(_551.value1)) {
                                    var __tco___dict_Ord_443 = __dict_Ord_443;
                                    var __tco__549 = Prelude[":"](new ThreeLeft(_551.value1, _551.value2, _551.value3, _551.value4, _551.value5, _551.value6))(_549);
                                    var __tco__550 = _550;
                                    var __tco__551 = _551.value0;
                                    __dict_Ord_443 = __tco___dict_Ord_443;
                                    _549 = __tco__549;
                                    _550 = __tco__550;
                                    _551 = __tco__551;
                                    continue tco;
                                };
                                if (Prelude["<"](__dict_Ord_443)(_551.value1)(_550) && Prelude["<"](__dict_Ord_443)(_550)(_551.value4)) {
                                    var __tco___dict_Ord_443 = __dict_Ord_443;
                                    var __tco__549 = Prelude[":"](new ThreeMiddle(_551.value0, _551.value1, _551.value2, _551.value4, _551.value5, _551.value6))(_549);
                                    var __tco__550 = _550;
                                    var __tco__551 = _551.value3;
                                    __dict_Ord_443 = __tco___dict_Ord_443;
                                    _549 = __tco__549;
                                    _550 = __tco__550;
                                    _551 = __tco__551;
                                    continue tco;
                                };
                                if (Prelude.otherwise) {
                                    var __tco___dict_Ord_443 = __dict_Ord_443;
                                    var __tco__549 = Prelude[":"](new ThreeRight(_551.value0, _551.value1, _551.value2, _551.value3, _551.value4, _551.value5))(_549);
                                    var __tco__550 = _550;
                                    var __tco__551 = _551.value6;
                                    __dict_Ord_443 = __tco___dict_Ord_443;
                                    _549 = __tco__549;
                                    _550 = __tco__550;
                                    _551 = __tco__551;
                                    continue tco;
                                };
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
        };
        return down(__dict_Ord_439)([  ]);
    };
    var alter = function (__dict_Ord_444) {
        return function (f) {
            return function (k) {
                return function (m) {
                    var _1242 = f(lookup(__dict_Ord_444)(k)(m));
                    if (_1242 instanceof Data_Maybe.Nothing) {
                        return $$delete(__dict_Ord_444)(k)(m);
                    };
                    if (_1242 instanceof Data_Maybe.Just) {
                        return insert(__dict_Ord_444)(k)(_1242.value0)(m);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return {
        alter: alter, 
        member: member, 
        "delete": $$delete, 
        lookup: lookup, 
        insert: insert, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Data_Graph = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Data_Map = PS.Data_Map;
    var Control_Monad = PS.Control_Monad;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array = PS.Data_Array;
    var $$Math = PS.$$Math;
    var Data_Set = PS.Data_Set;
    
    /**
     *  | A strongly-connected component of a graph.
     *  |
     *  | - `AcyclicSCC` identifies strongly-connected components consisting of a single vertex.
     *  | - `CyclicSCC` identifies strongly-connected components with one or more vertices with
     *  |   cycles.
     */
    var AcyclicSCC = (function () {
        function AcyclicSCC(value0) {
            this.value0 = value0;
        };
        AcyclicSCC.create = function (value0) {
            return new AcyclicSCC(value0);
        };
        return AcyclicSCC;
    })();
    
    /**
     *  | A strongly-connected component of a graph.
     *  |
     *  | - `AcyclicSCC` identifies strongly-connected components consisting of a single vertex.
     *  | - `CyclicSCC` identifies strongly-connected components with one or more vertices with
     *  |   cycles.
     */
    var CyclicSCC = (function () {
        function CyclicSCC(value0) {
            this.value0 = value0;
        };
        CyclicSCC.create = function (value0) {
            return new CyclicSCC(value0);
        };
        return CyclicSCC;
    })();
    
    /**
     *  | An directed edge between vertices labelled with keys of type `k`.
     */
    var Edge = (function () {
        function Edge(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Edge.create = function (value0) {
            return function (value1) {
                return new Edge(value0, value1);
            };
        };
        return Edge;
    })();
    
    /**
     *  | A graph with vertices of type `v`.
     *  |
     *  | Edges refer to vertices using keys of type `k`.
     */
    var Graph = (function () {
        function Graph(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Graph.create = function (value0) {
            return function (value1) {
                return new Graph(value0, value1);
            };
        };
        return Graph;
    })();
    
    /**
     *  | Returns the vertices contained in a strongly-connected component.
     */
    var vertices = function (_578) {
        if (_578 instanceof AcyclicSCC) {
            return [ _578.value0 ];
        };
        if (_578 instanceof CyclicSCC) {
            return _578.value0;
        };
        throw new Error("Failed pattern match");
    };
    var popUntil = function (__copy___dict_Eq_464) {
        return function (__copy__582) {
            return function (__copy__583) {
                return function (__copy__584) {
                    return function (__copy__585) {
                        var __dict_Eq_464 = __copy___dict_Eq_464;
                        var _582 = __copy__582;
                        var _583 = __copy__583;
                        var _584 = __copy__584;
                        var _585 = __copy__585;
                        tco: while (true) {
                            if (_584.length === 0) {
                                return {
                                    path: [  ], 
                                    component: _585
                                };
                            };
                            if (_584.length >= 1) {
                                var _1252 = _584.slice(1);
                                if (Prelude["=="](__dict_Eq_464)(_582(_583))(_582(_584[0]))) {
                                    return {
                                        path: _1252, 
                                        component: Prelude[":"](_584[0])(_585)
                                    };
                                };
                            };
                            if (_584.length >= 1) {
                                var _1254 = _584.slice(1);
                                var __tco___dict_Eq_464 = __dict_Eq_464;
                                var __tco__582 = _582;
                                var __tco__583 = _583;
                                var __tco__585 = Prelude[":"](_584[0])(_585);
                                __dict_Eq_464 = __tco___dict_Eq_464;
                                _582 = __tco__582;
                                _583 = __tco__583;
                                _584 = _1254;
                                _585 = __tco__585;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
        };
    };
    var maybeMin = function (_586) {
        return function (_587) {
            if (_587 instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(_586);
            };
            if (_587 instanceof Data_Maybe.Just) {
                return Data_Maybe.Just.create($$Math.min(_586)(_587.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     *  | Compute the strongly connected components of a graph.
     *  | 
     *  | This function is a slight generalization of `scc` which allows key and value types
     *  | to differ.
     */
    var scc$prime = function (__dict_Eq_465) {
        return function (__dict_Ord_466) {
            return function (_579) {
                return function (_580) {
                    return function (_581) {
                        return Control_Monad_Eff.runPure(function __do() {
                            var _42 = {
                                value: 0
                            };
                            var _41 = {
                                value: [  ]
                            };
                            var _40 = {
                                value: Data_Map.empty
                            };
                            var _39 = {
                                value: Data_Map.empty
                            };
                            var _38 = {
                                value: [  ]
                            };
                            return (function () {
                                var lowlinkOfKey = function (k) {
                                    return function __do() {
                                        return Data_Map.lookup(__dict_Ord_466)(k)(_39.value);
                                    };
                                };
                                var lowlinkOf = function (v) {
                                    return lowlinkOfKey(_579(v));
                                };
                                var isCycle = function (k) {
                                    return Data_Foldable.any(Data_Foldable.foldableArray)(function (_577) {
                                        return Prelude["=="](__dict_Eq_465)(_577.value0)(k) && Prelude["=="](__dict_Eq_465)(_577.value1)(k);
                                    })(_581.value1);
                                };
                                var makeComponent = function (_592) {
                                    if (_592.length === 1 && !isCycle(_579(_592[0]))) {
                                        return new AcyclicSCC(_592[0]);
                                    };
                                    return new CyclicSCC(_592);
                                };
                                var indexOfKey = function (k) {
                                    return function __do() {
                                        return Data_Map.lookup(__dict_Ord_466)(k)(_40.value);
                                    };
                                };
                                var strongConnect = function (k) {
                                    var v = _580(k);
                                    return function __do() {
                                        var _37 = _42.value;
                                        _40.value = Data_Map.insert(__dict_Ord_466)(k)(_37)(_40.value);
                                        _39.value = Data_Map.insert(__dict_Ord_466)(k)(_37)(_39.value);
                                        _42.value = _37 + 1;
                                        _41.value = Prelude[":"](v)(_41.value);
                                        Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(_581.value1)(function (_576) {
                                            return Control_Monad.when(Control_Monad_Eff.monadEff)(Prelude["=="](__dict_Eq_465)(k)(_576.value0))(function __do() {
                                                var _33 = indexOfKey(_576.value1)();
                                                return (function () {
                                                    if (_33 instanceof Data_Maybe.Nothing) {
                                                        var w = _580(_576.value1);
                                                        return function __do() {
                                                            strongConnect(_576.value1)();
                                                            var _30 = lowlinkOfKey(_576.value1)();
                                                            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_30)(function (lowlink) {
                                                                return Control_Monad_ST.modifySTRef(_39)(Data_Map.alter(__dict_Ord_466)(maybeMin(lowlink))(k));
                                                            })();
                                                        };
                                                    };
                                                    return Control_Monad.when(Control_Monad_Eff.monadEff)(Data_Foldable.elem(__dict_Eq_465)(Data_Foldable.foldableArray)(_576.value1)(Data_Array.map(_579)(_41.value)))(function __do() {
                                                        var _31 = indexOfKey(_576.value1)();
                                                        return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_31)(function (index_1) {
                                                            return Control_Monad_ST.modifySTRef(_39)(Data_Map.alter(__dict_Ord_466)(maybeMin(index_1))(k));
                                                        })();
                                                    });
                                                })()();
                                            });
                                        })();
                                        var _36 = indexOfKey(k)();
                                        var _35 = lowlinkOfKey(k)();
                                        return Control_Monad.when(Control_Monad_Eff.monadEff)(Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqNumber))(_36)(_35))(function __do() {
                                            var _34 = _41.value;
                                            return (function () {
                                                var newPath = popUntil(__dict_Eq_465)(_579)(v)(_34)([  ]);
                                                return function __do() {
                                                    _38.value = Prelude.flip(Prelude["++"](Data_Array.semigroupArray))([ makeComponent(newPath.component) ])(_38.value);
                                                    _41.value = newPath.path;
                                                    return Prelude.unit;
                                                };
                                            })()();
                                        })();
                                    };
                                };
                                var indexOf = function (v) {
                                    return indexOfKey(_579(v));
                                };
                                var go = function (_591) {
                                    if (_591.length === 0) {
                                        return Control_Monad_ST.readSTRef(_38);
                                    };
                                    if (_591.length >= 1) {
                                        var _1288 = _591.slice(1);
                                        return function __do() {
                                            var _29 = indexOf(_591[0])();
                                            Control_Monad.when(Control_Monad_Eff.monadEff)(Data_Maybe.isNothing(_29))(strongConnect(_579(_591[0])))();
                                            return go(_1288)();
                                        };
                                    };
                                    throw new Error("Failed pattern match");
                                };
                                return go(_581.value0);
                            })()();
                        });
                    };
                };
            };
        };
    };
    
    /**
     *  | Topologically sort the vertices of a graph
     *  | 
     *  | This function is a slight generalization of `scc` which allows key and value types
     *  | to differ.
     */
    var topSort$prime = function (__dict_Eq_469) {
        return function (__dict_Ord_470) {
            return function (makeKey) {
                return function (makeVert) {
                    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.reverse)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.concatMap(vertices))(scc$prime(__dict_Eq_469)(__dict_Ord_470)(makeKey)(makeVert)));
                };
            };
        };
    };
    
    /**
     *  | Topologically sort the vertices of a graph
     */
    var topSort = function (__dict_Eq_471) {
        return function (__dict_Ord_472) {
            return topSort$prime(__dict_Eq_471)(__dict_Ord_472)(Prelude.id(Prelude.categoryArr))(Prelude.id(Prelude.categoryArr));
        };
    };
    return {
        AcyclicSCC: AcyclicSCC, 
        CyclicSCC: CyclicSCC, 
        Graph: Graph, 
        Edge: Edge, 
        "topSort'": topSort$prime, 
        topSort: topSort, 
        "scc'": scc$prime, 
        vertices: vertices
    };
})();
var PS = PS || {};
PS.Signal_Norn = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Map = PS.Data_Map;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Graph = PS.Data_Graph;
    var Data_Array = PS.Data_Array;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Ref = PS.Control_Monad_Eff_Ref;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Data_Either = PS.Data_Either;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Function = PS.Data_Function;
    
    function emptyNornState(){
        return {};    
    }
;
    var Emitter = (function () {
        function Emitter(value0) {
            this.value0 = value0;
        };
        Emitter.create = function (value0) {
            return new Emitter(value0);
        };
        return Emitter;
    })();
    var Event = (function () {
        function Event(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        Event.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new Event(value0, value1, value2);
                };
            };
        };
        return Event;
    })();
    var Config = (function () {
        function Config(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Config.create = function (value0) {
            return function (value1) {
                return new Config(value0, value1);
            };
        };
        return Config;
    })();
    var Cfg = (function () {
        function Cfg(value0) {
            this.value0 = value0;
        };
        Cfg.create = function (value0) {
            return new Cfg(value0);
        };
        return Cfg;
    })();
    var onlyAfter = function (_719) {
        return function (_720) {
            return new Event(_720.value0, _720.value1, function (_716) {
                var _1294 = Data_Map.member(Prelude.ordString)(_719)(_716.value1);
                if (_1294) {
                    return _720.value2(new Data_Tuple.Tuple(_716.value0, _716.value1));
                };
                if (!_1294) {
                    return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var noopEvent = function (name) {
        return function __do() {
            var _52 = emptyNornState();
            return new Event(name, function (_714) {
                return _52;
            }, function (_715) {
                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
            });
        };
    };
    var eventName = function (_718) {
        return _718.value0;
    };
    var emptyConfig = new Config(new Data_Graph.Graph([  ], [  ]), Data_Map.empty);
    var cullMaybeList = function (list) {
        var maybeCons = function (_726) {
            return function (_727) {
                if (_726 instanceof Data_Maybe.Just) {
                    return Prelude[":"](_726.value0)(_727);
                };
                if (_726 instanceof Data_Maybe.Nothing) {
                    return _727;
                };
                throw new Error("Failed pattern match");
            };
        };
        return Data_Foldable.foldlArray(function (m) {
            return function (i) {
                return maybeCons(i)(m);
            };
        })([  ])(list);
    };
    var generateExecutionOrder = function (_725) {
        var name_order = Data_Graph.topSort(Prelude.eqString)(Prelude.ordString)(_725.value0);
        var final_order = Data_Array.reverse(cullMaybeList(Data_Array.map(function (name) {
            return Data_Map.lookup(Prelude.ordString)(name)(_725.value1);
        })(name_order)));
        return final_order;
    };
    var attachEvent = function (_721) {
        return function (_722) {
            return function (_723) {
                return function (_724) {
                    var new_verts = Prelude[":"](_723.value0)(_724.value0.value0);
                    var new_map = Data_Map.insert(Prelude.ordString)(_723.value0)(new Event(_723.value0, _723.value1, _723.value2))(_724.value1);
                    var new_edges = Data_Foldable.foldlArray(function (m_1) {
                        return function (i) {
                            return Prelude[":"](new Data_Graph.Edge(i, _723.value0))(m_1);
                        };
                    })(_724.value0.value1)(_722);
                    return new Config(new Data_Graph.Graph(new_verts, new_edges), new_map);
                };
            };
        };
    };
    var main = function __do() {
        var _56 = noopEvent("foo")();
        var _55 = noopEvent("bar")();
        var _54 = noopEvent("baz")();
        var _53 = noopEvent("foo-bar son")();
        return (function () {
            var emitter = new Emitter({
                el: "document", 
                event: "click"
            });
            var c_d = attachEvent(emitter)([ "foo", "bar" ])(_53)(emptyConfig);
            var c_a = attachEvent(emitter)([ "baz" ])(_56)(c_d);
            var c_b = attachEvent(emitter)([ "foo" ])(_55)(c_a);
            var c_c = attachEvent(emitter)([  ])(_54)(c_b);
            return function __do() {
                Debug_Trace.print(Prelude.showArray(Prelude.showString))(Data_Array.map(function (_717) {
                    return _717.value0;
                })(generateExecutionOrder(c_c)))();
                return Debug_Trace.trace("Foob")();
            };
        })()();
    };
    return {
        Config: Config, 
        Cfg: Cfg, 
        Emitter: Emitter, 
        Event: Event, 
        main: main, 
        generateExecutionOrder: generateExecutionOrder, 
        cullMaybeList: cullMaybeList, 
        attachEvent: attachEvent, 
        onlyAfter: onlyAfter, 
        emptyConfig: emptyConfig, 
        noopEvent: noopEvent, 
        eventName: eventName, 
        emptyNornState: emptyNornState
    };
})();
